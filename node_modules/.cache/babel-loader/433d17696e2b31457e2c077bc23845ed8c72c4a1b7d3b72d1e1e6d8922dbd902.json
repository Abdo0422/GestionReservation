{"ast":null,"code":"import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nlet singleton = null;\n\n/**\r\n * A zone with a fixed offset (meaning no DST)\r\n * @implements {Zone}\r\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\r\n   * Get a singleton instance of UTC\r\n   * @return {FixedOffsetZone}\r\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\r\n   * Get an instance with a specified offset\r\n   * @param {number} offset - The offset in minutes\r\n   * @return {FixedOffsetZone}\r\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\r\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\r\n   * @param {string} s - The offset string to parse\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\r\n   * @return {FixedOffsetZone}\r\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /**\r\n   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.\r\n   * @override\r\n   * @type {string}\r\n   */\n  get type() {\n    return \"fixed\";\n  }\n\n  /**\r\n   * The name of this zone.\r\n   * All fixed zones' names always start with \"UTC\" (plus optional offset)\r\n   * @override\r\n   * @type {string}\r\n   */\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : \"UTC\".concat(formatOffset(this.fixed, \"narrow\"));\n  }\n\n  /**\r\n   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`\r\n   *\r\n   * @override\r\n   * @type {string}\r\n   */\n  get ianaName() {\n    if (this.fixed === 0) {\n      return \"Etc/UTC\";\n    } else {\n      return \"Etc/GMT\".concat(formatOffset(-this.fixed, \"narrow\"));\n    }\n  }\n\n  /**\r\n   * Returns the offset's common name at the specified timestamp.\r\n   *\r\n   * For fixed offset zones this equals to the zone name.\r\n   * @override\r\n   */\n  offsetName() {\n    return this.name;\n  }\n\n  /**\r\n   * Returns the offset's value as a string\r\n   * @override\r\n   * @param {number} ts - Epoch milliseconds for which to get the offset\r\n   * @param {string} format - What style of offset to return.\r\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\r\n   * @return {string}\r\n   */\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /**\r\n   * Returns whether the offset is known to be fixed for the whole year:\r\n   * Always returns true for all fixed offset zones.\r\n   * @override\r\n   * @type {boolean}\r\n   */\n  get isUniversal() {\n    return true;\n  }\n\n  /**\r\n   * Return the offset in minutes for this zone at the specified timestamp.\r\n   *\r\n   * For fixed offset zones, this is constant and does not depend on a timestamp.\r\n   * @override\r\n   * @return {number}\r\n   */\n  offset() {\n    return this.fixed;\n  }\n\n  /**\r\n   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)\r\n   * @override\r\n   * @param {Zone} otherZone - the zone to compare\r\n   * @return {boolean}\r\n   */\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /**\r\n   * Return whether this Zone is valid:\r\n   * All fixed offset zones are valid.\r\n   * @override\r\n   * @type {boolean}\r\n   */\n  get isValid() {\n    return true;\n  }\n}","map":{"version":3,"names":["formatOffset","signedOffset","Zone","singleton","FixedOffsetZone","utcInstance","instance","offset","parseSpecifier","s","r","match","constructor","fixed","type","name","concat","ianaName","offsetName","ts","format","isUniversal","equals","otherZone","isValid"],"sources":["C:/Users/abdo loubachi/OneDrive/Documents/GitHub/GestionReservation/node_modules/luxon/src/zones/fixedOffsetZone.js"],"sourcesContent":["import { formatOffset, signedOffset } from \"../impl/util.js\";\r\nimport Zone from \"../zone.js\";\r\n\r\nlet singleton = null;\r\n\r\n/**\r\n * A zone with a fixed offset (meaning no DST)\r\n * @implements {Zone}\r\n */\r\nexport default class FixedOffsetZone extends Zone {\r\n  /**\r\n   * Get a singleton instance of UTC\r\n   * @return {FixedOffsetZone}\r\n   */\r\n  static get utcInstance() {\r\n    if (singleton === null) {\r\n      singleton = new FixedOffsetZone(0);\r\n    }\r\n    return singleton;\r\n  }\r\n\r\n  /**\r\n   * Get an instance with a specified offset\r\n   * @param {number} offset - The offset in minutes\r\n   * @return {FixedOffsetZone}\r\n   */\r\n  static instance(offset) {\r\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\r\n  }\r\n\r\n  /**\r\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\r\n   * @param {string} s - The offset string to parse\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\r\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\r\n   * @return {FixedOffsetZone}\r\n   */\r\n  static parseSpecifier(s) {\r\n    if (s) {\r\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\r\n      if (r) {\r\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  constructor(offset) {\r\n    super();\r\n    /** @private **/\r\n    this.fixed = offset;\r\n  }\r\n\r\n  /**\r\n   * The type of zone. `fixed` for all instances of `FixedOffsetZone`.\r\n   * @override\r\n   * @type {string}\r\n   */\r\n  get type() {\r\n    return \"fixed\";\r\n  }\r\n\r\n  /**\r\n   * The name of this zone.\r\n   * All fixed zones' names always start with \"UTC\" (plus optional offset)\r\n   * @override\r\n   * @type {string}\r\n   */\r\n  get name() {\r\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\r\n  }\r\n\r\n  /**\r\n   * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`\r\n   *\r\n   * @override\r\n   * @type {string}\r\n   */\r\n  get ianaName() {\r\n    if (this.fixed === 0) {\r\n      return \"Etc/UTC\";\r\n    } else {\r\n      return `Etc/GMT${formatOffset(-this.fixed, \"narrow\")}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the offset's common name at the specified timestamp.\r\n   *\r\n   * For fixed offset zones this equals to the zone name.\r\n   * @override\r\n   */\r\n  offsetName() {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset's value as a string\r\n   * @override\r\n   * @param {number} ts - Epoch milliseconds for which to get the offset\r\n   * @param {string} format - What style of offset to return.\r\n   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively\r\n   * @return {string}\r\n   */\r\n  formatOffset(ts, format) {\r\n    return formatOffset(this.fixed, format);\r\n  }\r\n\r\n  /**\r\n   * Returns whether the offset is known to be fixed for the whole year:\r\n   * Always returns true for all fixed offset zones.\r\n   * @override\r\n   * @type {boolean}\r\n   */\r\n  get isUniversal() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Return the offset in minutes for this zone at the specified timestamp.\r\n   *\r\n   * For fixed offset zones, this is constant and does not depend on a timestamp.\r\n   * @override\r\n   * @return {number}\r\n   */\r\n  offset() {\r\n    return this.fixed;\r\n  }\r\n\r\n  /**\r\n   * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)\r\n   * @override\r\n   * @param {Zone} otherZone - the zone to compare\r\n   * @return {boolean}\r\n   */\r\n  equals(otherZone) {\r\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\r\n  }\r\n\r\n  /**\r\n   * Return whether this Zone is valid:\r\n   * All fixed offset zones are valid.\r\n   * @override\r\n   * @type {boolean}\r\n   */\r\n  get isValid() {\r\n    return true;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,YAAY,QAAQ,iBAAiB;AAC5D,OAAOC,IAAI,MAAM,YAAY;AAE7B,IAAIC,SAAS,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AACA,eAAe,MAAMC,eAAe,SAASF,IAAI,CAAC;EAChD;AACF;AACA;AACA;EACE,WAAWG,WAAWA,CAAA,EAAG;IACvB,IAAIF,SAAS,KAAK,IAAI,EAAE;MACtBA,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC,CAAC;IACpC;IACA,OAAOD,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOG,QAAQA,CAACC,MAAM,EAAE;IACtB,OAAOA,MAAM,KAAK,CAAC,GAAGH,eAAe,CAACC,WAAW,GAAG,IAAID,eAAe,CAACG,MAAM,CAAC;EACjF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,cAAcA,CAACC,CAAC,EAAE;IACvB,IAAIA,CAAC,EAAE;MACL,MAAMC,CAAC,GAAGD,CAAC,CAACE,KAAK,CAAC,uCAAuC,CAAC;MAC1D,IAAID,CAAC,EAAE;QACL,OAAO,IAAIN,eAAe,CAACH,YAAY,CAACS,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtD;IACF;IACA,OAAO,IAAI;EACb;EAEAE,WAAWA,CAACL,MAAM,EAAE;IAClB,KAAK,CAAC,CAAC;IACP;IACA,IAAI,CAACM,KAAK,GAAGN,MAAM;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIO,IAAIA,CAAA,EAAG;IACT,OAAO,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACF,KAAK,KAAK,CAAC,GAAG,KAAK,SAAAG,MAAA,CAAShB,YAAY,CAAC,IAAI,CAACa,KAAK,EAAE,QAAQ,CAAC,CAAE;EAC9E;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAII,QAAQA,CAAA,EAAG;IACb,IAAI,IAAI,CAACJ,KAAK,KAAK,CAAC,EAAE;MACpB,OAAO,SAAS;IAClB,CAAC,MAAM;MACL,iBAAAG,MAAA,CAAiBhB,YAAY,CAAC,CAAC,IAAI,CAACa,KAAK,EAAE,QAAQ,CAAC;IACtD;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACH,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEf,YAAYA,CAACmB,EAAE,EAAEC,MAAM,EAAE;IACvB,OAAOpB,YAAY,CAAC,IAAI,CAACa,KAAK,EAAEO,MAAM,CAAC;EACzC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEd,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACM,KAAK;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACES,MAAMA,CAACC,SAAS,EAAE;IAChB,OAAOA,SAAS,CAACT,IAAI,KAAK,OAAO,IAAIS,SAAS,CAACV,KAAK,KAAK,IAAI,CAACA,KAAK;EACrE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIW,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}